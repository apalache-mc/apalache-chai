"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Cmd:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _CmdEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Cmd.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    PARSE: _Cmd.ValueType  # 0
    CHECK: _Cmd.ValueType  # 1
    TYPECHECK: _Cmd.ValueType  # 3
class Cmd(_Cmd, metaclass=_CmdEnumTypeWrapper):
    """The supported apalache subcommands"""
    pass

PARSE: Cmd.ValueType  # 0
CHECK: Cmd.ValueType  # 1
TYPECHECK: Cmd.ValueType  # 3
global___Cmd = Cmd


class PingRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___PingRequest = PingRequest

class PongResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___PongResponse = PongResponse

class CmdRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CMD_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    cmd: global___Cmd.ValueType
    config: typing.Text
    """A JSON encoded string with the application configuration"""

    def __init__(self,
        *,
        cmd: global___Cmd.ValueType = ...,
        config: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cmd",b"cmd","config",b"config"]) -> None: ...
global___CmdRequest = CmdRequest

class CmdResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SUCCESS_FIELD_NUMBER: builtins.int
    FAILURE_FIELD_NUMBER: builtins.int
    success: typing.Text
    """A JSON encoded string with data useful on success"""

    failure: typing.Text
    """A JSON encoded string with data useful on error"""

    def __init__(self,
        *,
        success: typing.Text = ...,
        failure: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["failure",b"failure","result",b"result","success",b"success"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["failure",b"failure","result",b"result","success",b"success"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["result",b"result"]) -> typing.Optional[typing_extensions.Literal["success","failure"]]: ...
global___CmdResponse = CmdResponse
